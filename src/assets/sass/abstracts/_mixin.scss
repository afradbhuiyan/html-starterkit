@use 'sass:math';

//Mobile Landscape
@mixin landscape {
  @media all and (orientation: landscape) {
    @content;
  }
}

//Mobile Portrait
@mixin portrait {
  @media all and (orientation: portrait) {
    @content;
  }
}

//Extra Extra Small Screen
@mixin xxsm-screen {
  @media screen and (max-width: 374px) {
    @content;
  }
}

// Extra Small Screen
@mixin xsm-screen {
  @media screen and (max-width: 424px) {
    @content;
  }
}

// Medium Small Screen (max-width: 575)
@mixin msm-screen {
  @media screen and (max-width: 575px) {
    @content;
  }
}

//Small Screen (max-width: 767)
@mixin sm-screen {
  @media screen and (max-width: 767px) {
    @content;
  }
}

//Large Screen (max-width: 991)
@mixin md-screen {
  @media screen and (max-width: 991px) {
    @content;
  }
}

//Extra Large Screen (max-width: 1199)
@mixin lg-screen {
  @media screen and (max-width: 1199px) {
    @content;
  }
}

//Xtra Large Screen i (max-width: 1399)
@mixin xl-screen {
  @media screen and (max-width: 1399px) {
    @content;
  }
}

//Extra Large Screen ii (max-width: 1499)
@mixin xxl-screen {
  @media screen and (max-width: 1499px) {
    @content;
  }
}

//Extra Large Screen ii (max-width: 1599)
@mixin xxxl-screen {
  @media screen and (max-width: 1599px) {
    @content;
  }
}

// Loop Base colors
@mixin loopColors($name, $flows, $limits: 9) {
  $i: 1;
  $deep: 100;
  $opacity: 0.1;

  @while $i <=$limits {
    @if ($flows=='dark') {
      #{$name}-d-#{$deep}: var(#{$name}-h) var(#{$name}-s) calc(var(#{$name}-l) - var(#{$name}-l) * $opacity);
    }

    @if ($flows=='light') {
      #{$name}-l-#{$deep}: var(#{$name}-h) calc(var(#{$name}-s)) calc(var(#{$name}-l) + (100% - var(#{$name}-l)) * $opacity);
    }

    // Upraised Value
    $i: $i + 1;
    $deep: $deep + 100;
    $opacity: $opacity + 0.1;
  }
}

// variable color to
@mixin colorVariable($name, $hex, $loop: 0) {
  //Dark and light will be the amount of loop;

  // Return the round Values
  $h: math.round(hue($hex));
  $s: math.round(saturation($hex));
  $l: math.round(lightness($hex));
  $string-h: #{$h + ''};

  // Remove deg from hsl values
  $string-h: #{$h + ''}; //make it string
  $h: str-slice($string-h, 1, -4); // remove last 3 digits

  @if ($loop > 0) {
    #{$name}-h: $h;
    #{$name}-s: $s;
    #{$name}-l: $l;
    #{$name}: var(#{$name}-h) var(#{$name}-s) var(#{$name}-l);
    @include loopColors(#{$name}, 'dark', $loop); //call loop function for looping Dark colors;
    @include loopColors(#{$name}, 'light', $loop); //call loop function for looping light colors;
  }

  @else {
    #{$name}: $h #{$s} #{$l};
  }
}

// Set Space Properties (Ex: Margin|Padding)
@mixin setSpace($values, $property) {
  #{$property}: map-get($values, xl);

  @include md-screen {
    #{$property}: map-get($values, md);
  }

  @include xsm-screen {
    #{$property}: map-get($values, xsm);
  }
}

// Set Space Utility Classes
@mixin createSpace($property, $section-spaces) {
  $prefix: '';

  @if($property==padding) {
    $prefix: p;
  }

  @if($property==margin) {
    $prefix: m;
  }

  @each $size, $values in $section-spaces {
    .#{$prefix}y-#{$size} {
      @include setSpace($values, #{$property}-block);
    }

    .#{$prefix}t-#{$size} {
      @include setSpace($values, #{$property}-top);
    }

    .#{$prefix}b-#{$size} {
      @include setSpace($values, #{$property}-bottom);
    }
  }
}

// Line Clamp CSS Properties;
@mixin line-clamp($lines: 2) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
}

// Button style mixin for shorthand button styles;
@mixin btn-style($name, $color: --white) {

  //solid button style
  &#{$name},
  &#{$name}:disabled,
  &#{$name}.disabled {
    color: hsl(var(#{$color}));
    border-color: hsl(var(#{$name}));
    background-color: hsl(var(#{$name}));
  }

  &#{$name} {

    &:hover,
    &:active,
    &:focus,
    &:focus-visible {
      color: hsl(var(#{$color})) !important;
      border-color: hsl(var(#{$name}-d-200)) !important;
      background-color: hsl(var(#{$name}-d-200)) !important;
    }
  }

  // Outline button styles
  &-outline#{$name},
  &-outline#{$name}:disabled,
  &-outline#{$name}.disabled {
    color: hsl(var(#{$name}));
    border-color: hsl(var(#{$name}));
    background-color: transparent;
  }

  &-outline#{$name} {

    &:hover,
    &:active,
    &:focus,
    &:focus-visible {
      color: hsl(var(#{$color})) !important;
      border-color: hsl(var(#{$name})) !important;
      background-color: hsl(var(#{$name})) !important;
    }
  }

  // Soft button styles
  &-soft#{$name},
  &-soft#{$name}:disabled,
  &-soft#{$name}.disabled {
    color: hsl(var(#{$name}));
    border-color: transparent;
    background-color: hsl(var(#{$name}) / 0.15);
  }

  &-soft#{$name} {

    &:hover,
    &:active,
    &:focus,
    &:focus-visible {
      color: hsl(var(#{$color})) !important;
      border-color: hsl(var(#{$name})) !important;
      background-color: hsl(var(#{$name})) !important;
    }
  }
}

// Gradient button style;
@mixin gradient-btn($name, $gradient: --gradient, $color: --white) {

  &#{$name},
  &#{$name}:disabled,
  &#{$name}.disabled {
    color: hsl(var(#{$color}));
    background: var(#{$gradient}) padding-box;
    border-color: transparent;
  }

  &#{$name} {

    &:hover,
    &:active,
    &:focus,
    &:focus-visible {
      color: hsl(var(#{$color})) !important;
      border-color: transparent !important;
    }
  }

  // Outline button styles
  &-outline#{$name},
  &-outline#{$name}:disabled,
  &-outline#{$name}.disabled {
    position: relative;
    z-index: 1;
    background: var(#{$gradient});
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    transition: .2s linear;
    border-color: transparent;

    &::before,
    &::after {
      content: '';
      border-radius: inherit;
      position: absolute;
      inset: 0;
      z-index: -1;
      transition: inherit;
    }

    &::before {
      background: var(#{$gradient}) border-box;
      border: 1px solid transparent;
      mask: linear-gradient(#fff 0 0) padding-box,
        linear-gradient(#fff 0 0);
      mask-composite: exclude;
    }

    &::after {
      opacity: 0;
      visibility: hidden;
      background: var(#{$gradient});
    }
  }

  &-outline#{$name} {

    &:hover,
    &:active,
    &:focus,
    &:focus-visible {
      border-color: transparent !important;
      -webkit-text-fill-color: hsl(var(#{$color}));

      &::before {
        opacity: 0;
        visibility: hidden;
      }

      &::after {
        opacity: 1;
        visibility: visible;
      }
    }
  }

  // Outline button styles
  &-soft#{$name},
  &-soft#{$name}:disabled,
  &-soft#{$name}.disabled {
    position: relative;
    z-index: 1;
    background: var(#{$gradient});
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    transition: .2s linear;
    border-color: transparent;

    &::before,
    &::after {
      content: '';
      border-radius: inherit;
      position: absolute;
      inset: 0;
      z-index: -1;
      transition: inherit;
    }

    &::before {
      background: var(#{$gradient}-l-100);
      // background: var(#{$gradient}) border-box;
      // border: 1px solid transparent;
      // mask: linear-gradient(#fff 0 0) padding-box,
      //   linear-gradient(#fff 0 0);
      // mask-composite: exclude;
    }

    &::after {
      opacity: 0;
      visibility: hidden;
      background: var(#{$gradient});
    }
  }

  &-soft#{$name} {

    &:hover,
    &:active,
    &:focus,
    &:focus-visible {
      border-color: transparent !important;
      -webkit-text-fill-color: hsl(var(#{$color}));

      &::before {
        opacity: 0;
        visibility: hidden;
      }

      &::after {
        opacity: 1;
        visibility: visible;
      }
    }
  }
}

// Custom table responsiveness
@mixin make-custom-table-responsive() {
  min-width: unset;

  thead {
    display: none;
  }

  tbody {

    &::before,
    &::after {
      display: none;
    }

    tr {
      display: block;

      td {
        text-align: right;
        padding: 12px !important;
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 16px;
        border-color: transparent;

        &::before {
          content: attr(data-label);
          font-size: rem(16px);
          font-weight: 500;
          line-height: 120%;
          color: hsl(var(--black));
          text-align: left;
          white-space: nowrap;
        }
      }

      &:first-child {
        td:first-child {
          padding-top: 24px !important;
        }
      }

      &:last-child {
        td:last-child {
          padding-bottom: 24px !important;
        }
      }

      &:not(:last-child) {
        td:last-child {
          border-color: hsl(var(--border-color));
        }
      }
    }
  }
}